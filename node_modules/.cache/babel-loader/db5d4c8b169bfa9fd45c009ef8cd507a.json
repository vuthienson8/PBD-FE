{"ast":null,"code":"import { combineReducers, configureStore } from '@reduxjs/toolkit'; // import { connectRouter, routerMiddleware } from 'connected-react-router';\n\nimport createSagaMiddleware from 'redux-saga'; // import { history } from '../utils/history';\n\nimport rootSaga from './rootSaga';\nconst rootReducer = combineReducers({});\nconst sagaMiddleware = createSagaMiddleware();\n\nconst configStore = () => {\n  const store = configureStore({\n    reducer: rootReducer,\n    middleware: getDefaultMiddleware => getDefaultMiddleware({\n      serializableCheck: false\n    }).concat(sagaMiddleware)\n  });\n  sagaMiddleware.run(rootSaga);\n  return store;\n};\n\nconst store = configStore();\nexport const history = syncHistoryWithStore(browserHistory, store);\nexport default store;","map":{"version":3,"sources":["/Users/vuson/Dev/pfg-fe/src/app/store.js"],"names":["combineReducers","configureStore","createSagaMiddleware","rootSaga","rootReducer","sagaMiddleware","configStore","store","reducer","middleware","getDefaultMiddleware","serializableCheck","concat","run","history","syncHistoryWithStore","browserHistory"],"mappings":"AAAA,SAASA,eAAT,EAA0BC,cAA1B,QAAgD,kBAAhD,C,CACA;;AACA,OAAOC,oBAAP,MAAiC,YAAjC,C,CACA;;AACA,OAAOC,QAAP,MAAqB,YAArB;AAEA,MAAMC,WAAW,GAAGJ,eAAe,CAAC,EAAD,CAAnC;AAEA,MAAMK,cAAc,GAAGH,oBAAoB,EAA3C;;AAEA,MAAMI,WAAW,GAAG,MAAM;AACxB,QAAMC,KAAK,GAAGN,cAAc,CAAC;AAC3BO,IAAAA,OAAO,EAAEJ,WADkB;AAE3BK,IAAAA,UAAU,EAAGC,oBAAD,IACVA,oBAAoB,CAAC;AACnBC,MAAAA,iBAAiB,EAAE;AADA,KAAD,CAApB,CAEGC,MAFH,CAEUP,cAFV;AAHyB,GAAD,CAA5B;AAOAA,EAAAA,cAAc,CAACQ,GAAf,CAAmBV,QAAnB;AACA,SAAOI,KAAP;AACD,CAVD;;AAWA,MAAMA,KAAK,GAAGD,WAAW,EAAzB;AACA,OAAO,MAAMQ,OAAO,GAAGC,oBAAoB,CAACC,cAAD,EAAiBT,KAAjB,CAApC;AACP,eAAeA,KAAf","sourcesContent":["import { combineReducers, configureStore } from '@reduxjs/toolkit';\n// import { connectRouter, routerMiddleware } from 'connected-react-router';\nimport createSagaMiddleware from 'redux-saga';\n// import { history } from '../utils/history';\nimport rootSaga from './rootSaga';\n\nconst rootReducer = combineReducers({});\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst configStore = () => {\n  const store = configureStore({\n    reducer: rootReducer,\n    middleware: (getDefaultMiddleware) =>\n      getDefaultMiddleware({\n        serializableCheck: false,\n      }).concat(sagaMiddleware),\n  });\n  sagaMiddleware.run(rootSaga);\n  return store;\n};\nconst store = configStore();\nexport const history = syncHistoryWithStore(browserHistory, store);\nexport default store;\n"]},"metadata":{},"sourceType":"module"}