{"ast":null,"code":"import { combineReducers, configureStore } from '@reduxjs/toolkit';\nimport { connectRouter, routerMiddleware } from 'connected-react-router';\nimport createSagaMiddleware from 'redux-saga';\nimport { history } from '../utils/history';\nimport rootSaga from './rootSaga';\nconst rootReducer = combineReducers({});\nconst sagaMiddleware = createSagaMiddleware();\n\nconst configStore = () => {\n  const store = configureStore({\n    reducer: rootReducer,\n    middleware: getDefaultMiddleware => getDefaultMiddleware({\n      serializableCheck: false\n    }).concat(sagaMiddleware)\n  });\n  sagaMiddleware.run(rootSaga);\n  return store;\n};\n\nconst store = configStore();\nexport default store;","map":{"version":3,"sources":["/Users/vuson/Dev/pfg-fe/src/app/store.js"],"names":["combineReducers","configureStore","connectRouter","routerMiddleware","createSagaMiddleware","history","rootSaga","rootReducer","sagaMiddleware","configStore","store","reducer","middleware","getDefaultMiddleware","serializableCheck","concat","run"],"mappings":"AAAA,SAASA,eAAT,EAA0BC,cAA1B,QAAgD,kBAAhD;AACA,SAASC,aAAT,EAAwBC,gBAAxB,QAAgD,wBAAhD;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AACA,SAASC,OAAT,QAAwB,kBAAxB;AACA,OAAOC,QAAP,MAAqB,YAArB;AAEA,MAAMC,WAAW,GAAGP,eAAe,CAAC,EAAD,CAAnC;AAEA,MAAMQ,cAAc,GAAGJ,oBAAoB,EAA3C;;AAEA,MAAMK,WAAW,GAAG,MAAM;AACxB,QAAMC,KAAK,GAAGT,cAAc,CAAC;AAC3BU,IAAAA,OAAO,EAAEJ,WADkB;AAE3BK,IAAAA,UAAU,EAAGC,oBAAD,IACVA,oBAAoB,CAAC;AACnBC,MAAAA,iBAAiB,EAAE;AADA,KAAD,CAApB,CAEGC,MAFH,CAEUP,cAFV;AAHyB,GAAD,CAA5B;AAOAA,EAAAA,cAAc,CAACQ,GAAf,CAAmBV,QAAnB;AACA,SAAOI,KAAP;AACD,CAVD;;AAWA,MAAMA,KAAK,GAAGD,WAAW,EAAzB;AAEA,eAAeC,KAAf","sourcesContent":["import { combineReducers, configureStore } from '@reduxjs/toolkit';\nimport { connectRouter, routerMiddleware } from 'connected-react-router';\nimport createSagaMiddleware from 'redux-saga';\nimport { history } from '../utils/history';\nimport rootSaga from './rootSaga';\n\nconst rootReducer = combineReducers({});\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst configStore = () => {\n  const store = configureStore({\n    reducer: rootReducer,\n    middleware: (getDefaultMiddleware) =>\n      getDefaultMiddleware({\n        serializableCheck: false,\n      }).concat(sagaMiddleware),\n  });\n  sagaMiddleware.run(rootSaga);\n  return store;\n};\nconst store = configStore();\n\nexport default store;\n"]},"metadata":{},"sourceType":"module"}